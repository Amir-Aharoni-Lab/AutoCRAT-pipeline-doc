{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to AutoCRAT Pipeline Documentation","text":"<p>Automated Chromosome Replication Analysis &amp; Tracking (AutoCRAT) pipeline analyzes time-lapse microscopy data to track chromosomal replication and dynamic interactions of fluorescently labeled loci in live cells.</p> <p>This guide provides documentation for the AutoCRAT pipeline and its supplementary scripts, designed to simplify pipeline results' management and visualization.</p>"},{"location":"#about-autocrat","title":"About AutoCRAT","text":"<p>AutoCRAT simplifies complex workflows, enabling you to focus on discoveries instead of processes. It offers automation, ease of use, a modular design, and high performance through multiprocessing.</p>"},{"location":"#key-design-principles","title":"Key Design Principles:","text":"<ul> <li>Fully automated and non-interactive: Optimized for scalable deployments with minimal user intervention.</li> <li>User-friendly: Easy to set up and operate.</li> <li>Modular architecture: Flexible structure for seamless integration and expansion.</li> <li>High performance: Leverages multiprocessing and pre-compilation for efficiency.</li> </ul>"},{"location":"#core-capabilities","title":"Core Capabilities:","text":"<ul> <li>Effortless data import: Supports microscopy movies in various formats.</li> <li>4D fluorescence dot detection: Identifies fluorescent dots in movies through advanced statistical analysis.</li> <li>Quantification of dot intensity: Provides detailed measurement insights.</li> <li>Particle tracking: Handles challenging low signal-to-noise ratios effectively.</li> <li>Cell identification: Groups nearby tracks across different channels.</li> <li>Precise 3D measurements: Calculates distances between fluorescent dots.</li> </ul>"},{"location":"#add-on-module-capabilities","title":"Add-On Module Capabilities:","text":"<ul> <li>Automated detection of DNA replication timing: Fully automated and identifies replication times without manual intervention.</li> <li>Replisome-normalized signal averaging: Delivers detailed quantification.</li> <li>Double-strand break detection: Identification of double-strand breaks.</li> </ul>"},{"location":"#autocrat-and-supplementary-scripts","title":"AutoCRAT and Supplementary Scripts","text":""},{"location":"CherryPicker/","title":"CherryPicker Script Documentation","text":"<p>The CherryPicker script creates filtered versions of 'Rep Summary' and 'RNSA' files by selecting a specific subset of cells. This script is useful for selecting a targeted group of cells for further analysis or visualization.</p>"},{"location":"CherryPicker/#key-tasks","title":"Key Tasks","text":""},{"location":"CherryPicker/#-read-input-files","title":"- Read Input Files","text":"<ul> <li>Reads the AutoCRAT 'Rep Summary' file.</li> <li>Optionally processes the 'RNSA' file if present in the same folder.</li> <li>Loads a cell selection file to determine which cells to keep in the output.</li> </ul>"},{"location":"CherryPicker/#-filter-cells-based-on-selection","title":"- Filter Cells Based on Selection","text":"<ul> <li>Matches cells in the 'Rep Summary' and 'RNSA' files to the user-provided cell selection list.</li> <li>Filters out unselected cells from the data.</li> </ul>"},{"location":"CherryPicker/#-generate-updated-files","title":"- Generate Updated Files","text":"<ul> <li>Creates filtered versions of 'Rep Summary' and optional 'RNSA' files that include only the selected cells.</li> </ul>"},{"location":"CherryPicker/#how-to-use-cherrypicker","title":"How to Use CherryPicker","text":""},{"location":"CherryPicker/#step-0-create-an-excel-file-for-cell-selection","title":"Step 0: Create an Excel File for Cell Selection","text":"<p>Create an Excel file (<code>.xlsx</code>) with two columns:    \u00a0\u00a0- Position: Position name for each cell.    \u00a0\u00a0- Cell: Unique cell identifier (e.g., <code>Cell_2</code>, <code>Cell_4</code>).</p> <pre><code>\n   | Position                                         | Cell    |\n   |--------------------------------------------------|---------|\n   | 20241126-1428wo-1428E ex2 FAPPG-01 - Position 1  | Cell_2  |\n   | 20241126-1428wo-1428E ex2 FAPPG-01 - Position 1  | Cell_4  |\n   | 20241128-1428wo-1428E FAPPG-01 - Position 2      | Cell_19 |\n\n</code></pre> <p>Save the file in the same folder as the Rep Summary file. This file will serve as the key input for selecting cells.</p>"},{"location":"CherryPicker/#step-1-edit-parameters-in-the-script","title":"Step 1: Edit Parameters in the Script","text":""},{"location":"CherryPicker/#specify-the-folder-and-file-names","title":"\u2022 Specify the Folder and File Names","text":"<p>Define the folder and filename of the Rep Summary file. If an RNSA file exists in the same folder, it will also be processed. Provide the filename of the Excel file listing the cells for selection.</p> <pre><code>folder = r'path_to_your_folder'  # Folder containing all input files\nrep_summary_filename = 'your_rep_summary_file.xlsx'  # Rep Summary file name\nselected_cells_filename = 'your_selected_cells_file.xlsx'  # File with selected cells\n</code></pre>"},{"location":"CherryPicker/#configure-summary-chart-parameters","title":"\u2022 Configure Summary Chart Parameters","text":"<p>Set the appearance of the RNSA summary chart:</p> <pre><code>colors = ['red', 'orange', 'lime']  # Colors for the chart\nrnsa_x_axis = [-2, 3]              # X-axis range\nrnsa_y_axis = [0.1, 0.8]           # Y-axis range\n</code></pre>"},{"location":"CherryPicker/#step-2-run-the-script","title":"Step 2: Run the Script","text":"<p>After editing the parameters: 1. Save the script. 2. Run the script in your Python environment (e.g., command line, Jupyter Notebook, or PyCharm).</p>"},{"location":"CherryPicker/#step-3-output-files","title":"Step 3: Output Files","text":"<p>The script generates the following output files in the same folder as the input files: - Filtered Rep Summary File: <code>your_rep_summary_file - Screened by your_selected_cells_file.xlsx</code> - Filtered RNSA File (if provided): <code>your_rep_summary_file - RNSA - Screened by your_selected_cells_file.xlsx</code></p>"},{"location":"CherryPicker/#example-configuration","title":"Example Configuration","text":"<p>Below is an example setup to filter cells specified in a file called <code>Selected_Cells.xlsx</code> from a Rep Summary file named <code>Experiment_Results.xlsx</code>.</p> <pre><code>\"\"\" Parameters \"\"\"\n\n\n# Folder in which all the relevant files are located.\nfolder = r'C:\\Experiment\\Results'\n\n# Name of the AutoCRAT \"Rep Summary\" file to be cherry-picked.\n# If a RNSA file is located in the same folder with an identical name\n# (except with \"RNSA\" instead of \"Rep Summary\"), it will also undergo cherry-picking.\nrep_summary_filename = 'Experiment_Results - Rep Summary.xlsx'\n\n# Name of an Excel file with the list of cells to select. This file should be\n# formatted with position names in the first column and cell numbers in the second\n# (as the \"Clustered\" file created by the RNSAheatmap script).\nselected_cells_filename = 'Selected_Cells.xlsx'\n\n# Parameters for RNSA summary chart.\ncolors = ['red', 'orange', 'lime']\nrnsa_x_axis = [-2, 3]\nrnsa_y_axis = [0.1, 0.8]\n</code></pre>"},{"location":"CherryPicker/#expected-output","title":"Expected Output","text":"<ul> <li> <p>Filtered Rep Summary File: <code>C:\\Experiment\\Results\\Experiment_Results - Rep Summary - Screened by Selected_Cells.xlsx</code></p> </li> <li> <p>Filtered RNSA File (if provided): <code>C:\\Experiment\\Results\\Experiment_Results - RNSA - Screened by Selected_Cells.xlsx</code></p> </li> </ul> <p>By following these steps, you can efficiently filter AutoCRAT-generated data files to focus on specific cells of interest.</p>"},{"location":"MergeAutoCRAT/","title":"MergeAutoCRAT Script Documentation","text":"<p>The MergeAutoCRAT script consolidates the results from multiple AutoCRAT runs by merging their respective 'Rep Summary' and 'RNSA' files. The script generates two unified output files: <code>Rep Summary.xlsx</code> and <code>RNSA.xlsx</code>.</p>"},{"location":"MergeAutoCRAT/#key-tasks","title":"Key Tasks","text":""},{"location":"MergeAutoCRAT/#-read-input-files","title":"- Read Input Files","text":"<ul> <li>Reads the 'Rep Summary' and 'RNSA' files from multiple AutoCRAT runs, as specified in the batch file.</li> </ul>"},{"location":"MergeAutoCRAT/#-merge-files","title":"- Merge Files","text":"<ul> <li>Merges the specified 'Rep Summary' and, if available, 'RNSA' files from multiple AutoCRAT runs into two unified output files.</li> </ul>"},{"location":"MergeAutoCRAT/#-generate-updated-files","title":"- Generate Updated Files","text":"<ul> <li>Creates final output files with the merged results in the defined merged results folder.</li> </ul>"},{"location":"MergeAutoCRAT/#how-to-use-mergeautocrat","title":"How to Use MergeAutoCRAT","text":""},{"location":"MergeAutoCRAT/#step-1-edit-the-batch-file","title":"Step 1: Edit the Batch File","text":"<p>Locate the batch file: <code>MergeAutoCRAT (Edit me then double-click to run!).bat</code> Open it in a text editor and update the following parameters as needed:</p>"},{"location":"MergeAutoCRAT/#specify-folders-containing-autocrat-runs","title":"\u2022 Specify Folders Containing AutoCRAT Runs","text":"<p>Provide the paths to the folders where the AutoCRAT results are stored. </p> <pre><code>--folders \"C:\\Data\\AutoCRAT_Run1\" \"C:\\Data\\AutoCRAT_Run2\" \"C:\\Data\\AutoCRAT_Run3\"\n</code></pre>"},{"location":"MergeAutoCRAT/#list-rep-summary-files-to-merge","title":"\u2022 List 'Rep Summary' Files to Merge","text":"<p>List the filenames of the 'Rep Summary' files you want to merge.  </p> <pre><code>--rep_summary_filenames \"Run1 - Rep Summary.xlsx\" \"Run2 - Rep Summary.xlsx\" \"Run3 - Rep Summary.xlsx\"\n</code></pre>"},{"location":"MergeAutoCRAT/#destination-folder-for-merged-results","title":"\u2022 Destination Folder for Merged Results","text":"<p>Indicate the folder where the merged files should be saved.  </p> <pre><code>--merged_folder \"C:\\Data\\Merged_Results\"\n</code></pre>"},{"location":"MergeAutoCRAT/#set-output-filenames","title":"\u2022 Set Output Filenames","text":"<p>Define the base name for the merged files. The script will automatically append appropriate suffixes (<code>- Rep Summary</code> and <code>- RNSA</code>).  </p> <pre><code>--merged_filename \"Combined_Results\"\n</code></pre>"},{"location":"MergeAutoCRAT/#step-2-run-the-script","title":"Step 2: Run the Script","text":"<p>After editing the file, save the changes and double-click it to execute. The merged results will be saved to the specified location.</p>"},{"location":"MergeAutoCRAT/#example-configuration","title":"Example Configuration","text":"<p>Here\u2019s a complete example of the batch file configuration:</p> <pre><code>venv\\Scripts\\python.exe MergeAutoCRAT.py ^\n--folders \"C:\\Project\\Run1\" \"C:\\Project\\Run2\" \"C:\\Project\\Run3\" ^\n--rep_summary_filenames \"Run1_Rep_Summary.xlsx\" \"Run2_Rep_Summary.xlsx\" \"Run3_Rep_Summary.xlsx\" ^\n--merged_folder \"C:\\Project\\Merged_Results\" ^\n--merged_filename \"Merged_Project_Results\"\n</code></pre>"},{"location":"MergeAutoCRAT/#expected-output","title":"Expected Output","text":"<ul> <li><code>C:\\Project\\Merged_Results\\Merged_Project_Results - Rep Summary.xlsx</code></li> <li><code>C:\\Project\\Merged_Results\\Merged_Project_Results - RNSA.xlsx</code></li> </ul> <p>By following these steps, you can efficiently merge the results of multiple AutoCRAT runs into comprehensive summary files.</p>"},{"location":"PlotRNSA/","title":"PlotRNSA Script Documentation","text":"<p>The PlotRNSA script generates a summary plot from an RNSA file using <code>Matplotlib</code>. It visualizes RNSA data with color-coded channels, mean values, standard error margins, and optional sigmoid fits. This script helps analyze replication dynamics and compare replication timing across experimental conditions.</p>"},{"location":"PlotRNSA/#key-tasks","title":"Key Tasks","text":""},{"location":"PlotRNSA/#-read-input-files","title":"- Read Input Files","text":"<ul> <li>Reads the 'RNSA' file and processes the RNSA Summary sheet from the Excel file.</li> </ul>"},{"location":"PlotRNSA/#-generate-fluorescence-intensity-plot","title":"- Generate Fluorescence Intensity Plot","text":"<ul> <li>Plots mean fluorescence intensity for each channel.</li> <li>Adds SEM shading to indicate uncertainty.</li> <li>Includes Sigmoid Curve (if available) \u2013 If the Sigmoid column is present in the RNSA file (generated by the RNSAsigmoid script), it is plotted as a dashed black line.</li> <li>Customizes plot appearance \u2013 Adjusts colors, line thickness, transparency, axis labels, and limits.</li> </ul>"},{"location":"PlotRNSA/#-save-the-output-plot","title":"- Save the Output Plot","text":"<ul> <li>The script saves the plot as a PNG file in the same directory as the input file.</li> </ul>"},{"location":"PlotRNSA/#how-to-use-plotrnsa","title":"How to Use PlotRNSA","text":""},{"location":"PlotRNSA/#step-1-edit-parameters-in-the-script","title":"Step 1: Edit Parameters in the Script","text":"<p>Modify the script parameters to customize the input file, appearance, and output.</p>"},{"location":"PlotRNSA/#specify-the-rnsa-file-location","title":"\u2022 Specify the RNSA File Location","text":"<p>Define the folder and filename of the RNSA file:</p> <pre><code>rnsa_folder = r'path_to_your_folder'\nrnsa_filename = 'your_rnsa_file.xlsx'\n</code></pre>"},{"location":"PlotRNSA/#configure-plot-appearance","title":"\u2022 Configure Plot Appearance","text":"<p>Customize how the plot is displayed. Adjust colors, line widths, transparency, axis limits, and labels:</p> <pre><code># Channel settings\nchannel_colors = ['red', 'orange', 'lime']  # Colors for each channel\nchannel_line_widths = [1.5, 1.5, 3]  # Line thickness for each channel\nline_transparency = [0.5, 0.5, 1]  # Line transparency\nshade_transparency = [0.1, 0.12, 0.25]  # SEM shading transparency\n\n# Axis settings\nrnsa_x_axis = [-1, 3]  # X-axis range\nrnsa_y_axis = [0.2, 0.7]  # Y-axis range\n\n# Labels\nlegend_labels = ['LacI-Halo-SiR', 'TetR-tdTomato', 'PCP-Envy']  # Legend labels\nrnsa_x_name = 'Replisome-Normalized Time'  # X-axis label\nrnsa_y_name = 'Normalized Fluorescent Intensity'  # Y-axis label\n</code></pre>"},{"location":"PlotRNSA/#step-2-run-the-script","title":"Step 2: Run the Script","text":"<p>After editing the parameters: \u2022 Save the script. \u2022 Run the script in a Python environment (command line, Jupyter Notebook, or PyCharm).</p>"},{"location":"PlotRNSA/#step-3-output-files","title":"Step 3: Output Files","text":"<p>The script generates a PNG image of the RNSA plot in the same folder as the input file: \u2022 <code>your_rnsa_file - RNSA.png</code></p>"},{"location":"PlotRNSA/#example-configuration","title":"Example Configuration","text":"<p>Below is a sample configuration to visualize fluorescence intensity curves for three channels:</p> <pre><code>\"\"\" Parameters \"\"\"\n\n# Location and filename of the relevant RNSA file.\nrnsa_folder = r'C:\\Project\\Merged_Results'\nrnsa_filename = 'Merged_Project_Results - RNSA.xlsx'\n\n# Color of each channel (in the order they appear in the RNSA file).\nchannel_colors = ['red', 'orange', 'lime']\n# Relative width of line for each channel.\nchannel_line_widths = [1.5, 1.5, 3]\n# Line transparency for each channel (0-transparent, 1-opaque).\nline_transparency = [0.5, 0.5, 1]\n# SEM shading transparency for each channel (0-transparent, 1-opaque).\nshade_transparency = [0.1, 0.12, 0.25]\n# Bottom and top limits on the X axis displayed in the chart.\nrnsa_x_axis = [-1, 3\n# Bottom and top limits on the Y axis displayed in the chart.\nrnsa_y_axis = [0.2, 0.7]\n# Labels to be displayed in the legend. If empty, legend will not be displayed.\nlegend_labels = ['LacI-Halo-SiR', 'TetR-tdTomato', 'PCP-Envy'\n# Axis names.\nrnsa_x_name = 'Replisome-Normalized Time'\nrnsa_y_name = 'Normalized Fluorescent Intensity'\n</code></pre>"},{"location":"PlotRNSA/#expected-output","title":"Expected Output","text":"<p>\u2022 <code>C:\\Project\\Merged_Results\\Merged_Project_Results - RNSA.png</code></p> Replisome-Normalized Signal Averaging  Plot <p>Figure: Example of Replisome-Normalized Signal Averaging Plot generated by the PlotRNSA script </p> <p>By following these steps, you can efficiently generate and customize fluorescence intensity plots from RNSA data.</p>"},{"location":"RNSAheatmap/","title":"RNSAheatmap Script Documentation","text":"<p>The RNSAheatmap script generates a clustered heatmap from an RNSA file, visualizing the signal intensities of individual cells across normalized time. This visualization enables the detection of clustering patterns in the data and provides a visual summary of cell behavior.</p>"},{"location":"RNSAheatmap/#key-tasks","title":"Key Tasks","text":""},{"location":"RNSAheatmap/#-read-and-process-input-files","title":"- Read and Process Input Files","text":"<ul> <li>Reads the 'RNSA' file and extracts the relevant signal data from the third sheet of the file.</li> <li>Aggregates data to reduce resolution for better visualization and computation by grouping and averaging data points into intervals (intervals are defined by rounding normalized time values to two decimal places, resulting in a more compact representation of the data).</li> </ul>"},{"location":"RNSAheatmap/#-filter-data","title":"- Filter Data","text":"<ul> <li>Restricts the data to a segment of the normalized time axis, as specified by <code>rnsa_x_axis</code>.</li> <li>Removes cells with excessive missing data by checking the percentage of missing values within the defined range (<code>max_nan_range</code>) and excluding cells that exceed the threshold (<code>max_nans</code>).</li> </ul>"},{"location":"RNSAheatmap/#-cluster-data","title":"- Cluster Data","text":"<ul> <li>Uses hierarchical clustering to group cells with similar signal patterns.</li> <li>Reorganizes the data to reflect clustering results.</li> </ul>"},{"location":"RNSAheatmap/#-generate-and-save-clustered-heatmap","title":"- Generate and Save Clustered Heatmap","text":"<ul> <li>Visualizes the clustered data as a heatmap.</li> <li>Saves the heatmap as a PNG image.</li> </ul>"},{"location":"RNSAheatmap/#-save-clustered-data","title":"- Save Clustered Data","text":"<ul> <li>Creates an updated Excel file containing the clustered RNSA data for further examination.</li> </ul>"},{"location":"RNSAheatmap/#how-to-use-rnsaheatmap","title":"How to Use RNSAheatmap","text":""},{"location":"RNSAheatmap/#step-1-edit-parameters-in-the-script","title":"Step 1: Edit Parameters in the Script","text":"<p>Customize the following parameters to configure the script for your analysis.</p>"},{"location":"RNSAheatmap/#specify-the-rnsa-file-location","title":"\u2022 Specify the RNSA File Location","text":"<p>Set the folder and filename of the RNSA file:</p> <pre><code>rnsa_folder = r'path_to_your_folder'\nrnsa_filename = 'your_rnsa_file.xlsx'\n</code></pre>"},{"location":"RNSAheatmap/#set-heatmap-appearance","title":"\u2022 Set Heatmap Appearance","text":"<p>Specify the desired color for the heatmap:</p> <pre><code>heatmap_color = 'lime'\n</code></pre>"},{"location":"RNSAheatmap/#configure-x-axis-range","title":"\u2022 Configure X-Axis Range","text":"<p>Restrict the normalized time axis for clustering and visualization:</p> <pre><code>rnsa_x_axis = [-2, 3]\n</code></pre>"},{"location":"RNSAheatmap/#missing-data-threshold","title":"\u2022 Missing Data Threshold","text":"<p>Set the range and threshold to remove cells with missing data: - Define the range for evaluating missing data using <code>max_nan_range</code>. - Set the threshold for the maximum allowed percentage of missing data using <code>max_nans</code>.</p> <pre><code>max_nan_range = [0, 3]  # Range for evaluating missing data\nmax_nans = 30           # Maximum allowed percentage of missing data\n</code></pre>"},{"location":"RNSAheatmap/#step-2-run-the-script","title":"Step 2: Run the Script","text":"<p>After editing the parameters:</p> <ul> <li>Save the script.</li> <li>Run the script in your Python environment (e.g., Command Line, Jupyter Notebook, PyCharm).</li> </ul>"},{"location":"RNSAheatmap/#step-3-output-files","title":"Step 3: Output Files","text":"<p>The script generates two output files, saved in the same folder as the original RNSA file:</p> <p>\u00a0\u00a0\u2022 <code>your_rnsa_file - Clustered.xlsx</code> - Clustered RNSA file that contains clustered cell data for detailed analysis. \u00a0\u00a0\u2022 <code>your_rnsa_file - Heatmap.png</code>- Clustered heatmap PNG file that visualizes the clustered data</p>"},{"location":"RNSAheatmap/#example-configuration","title":"Example Configuration","text":"<p>Below is an example setup for running the script. The script will filter the data to include only values within the time range of -1 to 3 normalized time units. Cells with more than 30% missing data in the range 0 to 3 will be excluded.</p> <pre><code>\"\"\" Parameters \"\"\"\n\n# Location and filename of the relevant RNSA file.\nrnsa_folder = r'C:\\Project\\RNSA_Results'\nrnsa_filename = 'Merged_Project_Results - RNSA.xlsx'\n\n# Desired color of heatmap.\nheatmap_color = 'lime'\n\n# Lower and upper bounds of the X axis to display.\n# This is the 'normalized time' axis in RNSA charts.\n# Note: this will also affect clustering results, since clustering\n# is performed only on the desired segment of the data.\nrnsa_x_axis = [-1, 3]\n\n# Omit cells with a high proportion of missing data.\n# Cells for which too much data is missing within these bounds\n# will be omitted from the heatmap. This range must be smaller\n# than or equal to the range defined in rnsa_x_axis.\nmax_nan_range = [0, 3]\n# The maximum allowed percentage of missing data within the above bound.\nmax_nans = 30\n</code></pre>"},{"location":"RNSAheatmap/#expected-output","title":"Expected OutputClustered Heatmap","text":"<ul> <li><code>C:\\Project\\RNSA_Results\\Merged_Project_Results - RNSA - Clustered.xlsx</code></li> <li><code>C:\\Project\\RNSA_Results\\Merged_Project_Results - RNSA - Heatmap.png</code></li> </ul> <p>Figure: Example of a clustered heatmap for RNSA data</p> <p>By following these steps, you can efficiently cluster and visualize RNSA data, enabling the identification of meaningful patterns in cellular signals.</p>"},{"location":"RNSAsigmoid/","title":"RNSAsigmoid Script Documentation","text":"<p>The RNSAsigmoid script fits a sigmoidal function to the averaged replisome-normalized signal in an RNSA file over a specified time window. This allows for identifying key trends in cellular signal behavior and extracting meaningful parameters from the fitted curve.</p>"},{"location":"RNSAsigmoid/#key-tasks","title":"Key Tasks","text":""},{"location":"RNSAsigmoid/#-read-and-process-input-files","title":"- Read and Process Input Files","text":"<ul> <li>Loads an RNSA Excel file and extracts data from the RNSA Summary sheet.</li> <li>Identifies the available channels from the sheet names.</li> <li>Selects the values for the specified time window.</li> </ul>"},{"location":"RNSAsigmoid/#-fit-a-sigmoidal-function","title":"- Fit a Sigmoidal Function","text":"<ul> <li>Uses a logistic function to model the signal trend.</li> </ul> <p>$$ f(x) = \\text{base} + \\frac{\\text{height}}{1 + e^{-\\text{steepness} \\cdot (x - \\text{midpoint})}} $$</p> <ul> <li>Fits the function using SciPy's curve fitting algorithm to determine the best-fit parameters:<ul> <li>Base level: The lower asymptote.</li> <li>Height: Difference between upper and lower asymptotes.</li> <li>Steepness: Controls the curve's slope.</li> <li>Midpoint: The normalized time at which the signal reaches half of its maximum height.</li> </ul> </li> </ul>"},{"location":"RNSAsigmoid/#-generate-and-save-updated-rnsa-file","title":"- Generate and Save Updated RNSA File","text":"<ul> <li>Creates a new Excel file that contains only the 'RNSA_Summary' sheet.</li> <li>Saves the fitted sigmoid values along with the original data.</li> <li>Adds a sigmoid trendline to the summary chart.</li> <li>Annotates the midpoint in the exported file.</li> </ul>"},{"location":"RNSAsigmoid/#how-to-use-rnsasigmoid","title":"How to Use RNSAsigmoid","text":""},{"location":"RNSAsigmoid/#step-1-edit-parameters-in-the-script","title":"Step 1: Edit Parameters in the Script","text":"<p>Modify the following parameters in the script to customize your analysis.</p>"},{"location":"RNSAsigmoid/#specify-the-rnsa-file-location","title":"\u2022 Specify the RNSA File Location","text":"<p>Set the folder path and filename of the RNSA file:</p> <pre><code>rnsa_folder = r'path_to_your_folder'\nrnsa_filename = 'your_rnsa_file.xlsx'\n</code></pre>"},{"location":"RNSAsigmoid/#define-the-sigmoidal-fit-window","title":"\u2022 Define the Sigmoidal Fit Window","text":"<p>Specify the time range where the fit should be applied:</p> <pre><code>fit_window_start = -1\nfit_window_end = 1.8\n</code></pre>"},{"location":"RNSAsigmoid/#choose-the-signal-channel","title":"\u2022 Choose the Signal Channel","text":"<p>Specify the channel for which to perform the fitting:</p> <pre><code>channel_of_interest = 'EGFP'\n</code></pre>"},{"location":"RNSAsigmoid/#configure-chart-axes","title":"\u2022 Configure Chart Axes","text":"<p>Set the appearance of the RNSA summary chart:</p> <pre><code>colors = ['red', 'orange', 'lime']  # Chart colors\nrnsa_x_axis = [-1, 3]  # X-axis range\nrnsa_y_axis = [0.1, 0.8]  # Y-axis range\n</code></pre>"},{"location":"RNSAsigmoid/#step-2-run-the-script","title":"Step 2: Run the Script","text":"<p>After setting the parameters: \u2022 Save the script. \u2022 Run it in your Python environment (e.g., Command Line, Jupyter Notebook, PyCharm).</p>"},{"location":"RNSAsigmoid/#step-3-output-files","title":"Step 3: Output Files","text":"<p>The script generates an updated RNSA file, stored in the same folder as the original:</p> <pre><code>your_rnsa_file - Sigmoid.xlsx\n</code></pre>"},{"location":"RNSAsigmoid/#example-configuration","title":"Example Configuration","text":"<p>Below is a sample configuration that sets up the script to fit a sigmoidal function within the time window of -1 to 1.8 normalized time units. The fitting will be applied to the EGFP signal channel, and the results will be visualized within the x-axis range of -1 to 3 and y-axis range of 0.1 to 0.8.</p> <pre><code>\"\"\" Parameters \"\"\"\n\n# Location and filename of the relevant RNSA file.\nrnsa_folder = r'C:\\Project\\RNSA_Results'\nrnsa_filename = 'Merged_Project_Results - RNSA.xlsx'\n\n# Start and end point for the sigmoidal fit.\nfit_window_start = -1\nfit_window_end = 1.8\n\n# Name of channel for which to perform fitting.\nchannel_of_interest = 'EGFP'\n\n# Parameters for RNSA summary chart.\ncolors = ['red', 'orange', 'lime']\nrnsa_x_axis = [-1, 3]\nrnsa_y_axis = [0.1, 0.8]\n\n</code></pre>"},{"location":"RNSAsigmoid/#expected-output","title":"Expected Output","text":"<p>After running the script, the sigmoid-fitted RNSA file (containing only the 'RNSA_Summary' sheet) will be saved at:</p> <p>\u2022 <code>C:\\Project\\RNSA_Results\\Merged_Project_Results - RNSA - Sigmoid.xlsx</code></p> <p>By following these steps, you can efficiently analyze and visualize RNSA signal trends using sigmoidal fitting. </p>"},{"location":"RNSAsubpop/","title":"RNSAsubpop Script Documentation","text":"<p>The RNSAsubpop script processes an RNSA file to automatically classify positive cells into predefined subpopulations based on their signal intensity in specific time windows. It enables efficient categorization, visualization, and clustering of cellular data.</p> <p>There are two versions of the script:</p> <ul> <li>RNSAsubpop \u2013 Divides cells into predefined subpopulations based on signal intensity and generates output files.  </li> <li>RNSAsubpop_clustered \u2013 Performs additional hierarchical clustering within each subpopulation after subpopulation selection, enhancing visualization and pattern detection.</li> </ul>"},{"location":"RNSAsubpop/#key-tasks","title":"Key Tasks","text":""},{"location":"RNSAsubpop/#-read-and-process-input-files","title":"- Read and Process Input Files","text":"<ul> <li>Reads the RNSA and Replication Summary files, both expected to be obtained after running ScreenRNSA script.</li> <li>Loads the 'Positive' sheet from the Replication Summary and processes the third sheet from the RNSA file.</li> </ul>"},{"location":"RNSAsubpop/#-subpopulation-selection","title":"- Subpopulation Selection","text":"<ul> <li>Divides cells into three predefined subpopulations (Early, Late, Other) based on intensity thresholds during specific time windows.</li> <li>Filters out cells with excessive missing data (above the threshold <code>max_nans</code>).</li> </ul>"},{"location":"RNSAsubpop/#-generate-and-save-subpopulation-data","title":"- Generate and Save Subpopulation Data","text":"<ul> <li>Creates and exports Rep Summary for each subpopulation.</li> <li>Generates and exports RNSA files specific to each subpopulation.</li> </ul>"},{"location":"RNSAsubpop/#-generate-and-save-heatmap-both-versions","title":"- Generate and Save Heatmap (Both Versions)","text":"<ul> <li> <p>RNSAsubpop:</p> <ul> <li>Creates a heatmap visualizing subpopulation data.</li> <li>Saves the heatmap as a PNG image.</li> </ul> </li> <li> <p>RNSAsubpop_clustered:</p> <ul> <li>Performs\u00a0hierarchical clustering within each subpopulation\u00a0before heatmap generation.</li> <li>Saves the clustered heatmap as PNG and PDF files.</li> </ul> </li> </ul>"},{"location":"RNSAsubpop/#-save-subpopulation-data-for-heatmap","title":"- Save Subpopulation Data for Heatmap","text":"<ul> <li>Creates an updated Excel file containing the processed RNSA data for each subpopulation, structured for heatmap generation and further analysis.</li> </ul>"},{"location":"RNSAsubpop/#how-to-use-rnsasubpop","title":"How to Use RNSAsubpop","text":""},{"location":"RNSAsubpop/#step-1-edit-parameters-in-the-script","title":"Step 1: Edit Parameters in the Script","text":"<p>Modify the following parameters before running the script.</p>"},{"location":"RNSAsubpop/#specify-the-rnsa-file-location","title":"\u2022 Specify the RNSA File Location","text":"<p>Set the folder and filename of the RNSA file. The script requires an RNSA file generated after running the ScreenRNSA script. The script will automatically detect and process the corresponding Replication Summary file.</p> <pre><code>folder = r'path_to_your_folder'\nrnsa_filename = 'your_rnsa_file.xlsx'\n</code></pre>"},{"location":"RNSAsubpop/#define-subpopulation-parameters","title":"\u2022 Define Subpopulation Parameters","text":"<p>By default, the script automatically assigns cells into three predefined subpopulations based on their signal intensities during specific time windows.</p>"},{"location":"RNSAsubpop/#default-subpopulations-and-classification-conditions","title":"Default Subpopulations and Classification Conditions:","text":"Subpopulation Window 1 (-0.5 to 0) Window 2 (0.6 to 1.6) Window 3 (2.2 to 3) Missing Data Threshold Early (pop1) Mean intensity &lt; 0.35 Mean intensity &gt; 0.3 Mean intensity &lt; 0.4 Below 75% in each window Late (pop2) Mean intensity &lt; 0.35 Mean intensity &lt; 0.4 Mean intensity &gt; 0.3 Below 75% in each window Other N/A N/A N/A Below 75%, does not fit Early/Late <p>Note: Time windows, subpopulation names, and intensity thresholds are configurable.</p> <pre><code>time_windows = ([-0.5, 0], [0.6, 1.6], [2.2, 3])  \npop1_thresholds = (0.35, 0.3, 0.4)  \npop2_thresholds = (0.35, 0.4, 0.3)  \npop_names = ['Early', 'Late', 'Other']\n</code></pre>"},{"location":"RNSAsubpop/#set-missing-data-threshold","title":"\u2022 Set Missing Data Threshold","text":"<p>Define the allowed percentage of missing data:</p> <pre><code>max_nans = 75  # Exclude cells with more than 75% missing data in time windows\n</code></pre>"},{"location":"RNSAsubpop/#configure-heatmap-output","title":"\u2022 Configure Heatmap Output","text":"<p>Define the subpopulations to appear in the heatmap:</p> <pre><code>heatmap_pops = ['Early', 'Late', 'Other']\n</code></pre>"},{"location":"RNSAsubpop/#configure-summary-chart-parameters","title":"\u2022 Configure Summary Chart Parameters","text":"<p>Set the appearance of the RNSA summary chart:</p> <pre><code>colors = ['red', 'orange', 'lime']  # Colors for the chart\nrnsa_x_axis = [-1, 3]              # X-axis range\nrnsa_y_axis = [0.1, 0.8]           # Y-axis range\n</code></pre>"},{"location":"RNSAsubpop/#step-2-run-the-script","title":"Step 2: Run the Script","text":"<p>After editing the parameters:</p> <ul> <li>Save the script.</li> <li>Run the script in your Python environment (e.g., Command Line, Jupyter Notebook, PyCharm).</li> </ul>"},{"location":"RNSAsubpop/#step-3-output-files","title":"Step 3: Output Files","text":"<p>The script generates multiple output files, saved in the same folder as the original RNSA file. These files include subpopulation-specific data and heatmap visualizations.</p>"},{"location":"RNSAsubpop/#replication-summary-files-for-each-subpopulation","title":"Replication Summary files for each subpopulation:","text":"<p>\u00a0\u00a0\u2022 <code>your_RepSummary_file - All.xlsx</code> \u00a0\u00a0\u2022 <code>your_RepSummary_file - Early.xlsx</code> \u00a0\u00a0\u2022 <code>your_RepSummary_file - Late.xlsx</code> \u00a0\u00a0\u2022 <code>your_RepSummary_file - Other.xlsx</code></p>"},{"location":"RNSAsubpop/#rnsa-files-for-each-subpopulation","title":"RNSA files for each subpopulation:","text":"<p>\u00a0\u00a0\u2022 <code>your_rnsa_file - All.xlsx</code> \u00a0\u00a0\u2022 <code>your_rnsa_file - Early.xlsx</code> \u00a0\u00a0\u2022 <code>your_rnsa_file - Late.xlsx</code> \u00a0\u00a0\u2022 <code>your_rnsa_file - Other.xlsx</code></p>"},{"location":"RNSAsubpop/#excel-file-containing-all-subpopulation-data-for-heatmap-generation","title":"Excel file containing all subpopulation data for heatmap generation:","text":"<p>\u00a0\u00a0\u2022 <code>your_rnsa_file - Subpopulations.xlsx</code></p>"},{"location":"RNSAsubpop/#a-heatmap-visualization-of-subpopulations-saved-as-an-image","title":"A heatmap visualization of subpopulations, saved as an image:","text":"<p>\u00a0\u00a0\u2022 <code>your_rnsa_file - Subpopulation Heatmap.png</code></p>"},{"location":"RNSAsubpop/#a-clustered-heatmap-visualization-of-subpopulations-as-a-pdf-for-rnsasubpop_clustered-version-of-the-script","title":"A clustered heatmap visualization of subpopulations as a PDF (for RNSAsubpop_clustered version of the script):","text":"<p>\u00a0\u00a0\u2022 <code>your_rnsa_file - Subpopulation Heatmap.pdf</code></p>"},{"location":"RNSAsubpop/#example-configuration","title":"Example Configuration","text":"<p>Below is an example setup for running the script.</p> <p>The script will: - Assign cells to subpopulations (Early, Late, Other) based on intensity thresholds. - Exclude cells with more than 75% missing data in the specified time windows. - Plot a heatmap visualization of subpopulations</p> <pre><code>\"\"\" Parameters \"\"\"\n\n# Location and filename of the relevant RNSA file.\nfolder = r'C:\\Project\\RNSA_Results'\nrnsa_filename = 'Merged_Project_Results - RNSA.xlsx'\n\n# Define time windows and thresholds for subpopulation selection\ntime_windows = ([-0.5, 0], [0.6, 1.6], [2.2, 3])\npop1_thresholds = (0.35, 0.3, 0.4)\npop2_thresholds = (0.35, 0.4, 0.3)\n\n# The maximum allowed percentage of missing data in the examined time windows.\nmax_nans = 75\n\n# Names of the subpopulations (must be 3 subpopulations).\npop_names = ['Early', 'Late', 'Other']\n\n# Which of the above populations should appear in the final heatmap.\nheatmap_pops = ['Early', 'Late', 'Other']\n\n# Parameters for RNSA summary chart.\ncolors = ['red', 'orange', 'lime']\nrnsa_x_axis = [-1, 3]\nrnsa_y_axis = [0.1, 0.8]\n</code></pre>"},{"location":"RNSAsubpop/#expected-output","title":"Expected OutputHierarchically Clustered Heatmap of Detected Early, Late, and Other Subpopulations","text":"<p>\u00a0\u00a0\u2022 <code>C:\\Project\\RNSA_Results\\Merged_Project_Results - Rep Summary - All.xlsx</code> \u00a0\u00a0\u2022 <code>C:\\Project\\RNSA_Results\\Merged_Project_Results - Rep Summary - Early.xlsx</code> \u00a0\u00a0\u2022 <code>C:\\Project\\RNSA_Results\\Merged_Project_Results - Rep Summary - Late.xlsx</code> \u00a0\u00a0\u2022 <code>C:\\Project\\RNSA_Results\\Merged_Project_Results - Rep Summary - Other.xlsx</code></p> <p>\u00a0\u00a0\u2022 <code>C:\\Project\\RNSA_Results\\Merged_Project_Results - RNSA - All.xlsx</code> \u00a0\u00a0\u2022 <code>C:\\Project\\RNSA_Results\\Merged_Project_Results - RNSA - Early.xlsx</code> \u00a0\u00a0\u2022 <code>C:\\Project\\RNSA_Results\\Merged_Project_Results - RNSA - Late.xlsx</code> \u00a0\u00a0\u2022 <code>C:\\Project\\RNSA_Results\\Merged_Project_Results - RNSA - Other.xlsx</code></p> <p>\u00a0\u00a0\u2022 <code>C:\\Project\\RNSA_Results\\Merged_Project_Results - RNSA - Subpopulations.xlsx</code> \u00a0\u00a0\u2022 <code>C:\\Project\\RNSA_Results\\Merged_Project_Results - RNSA - Subpopulation Heatmap.png</code></p> <p>For the clustering version, an additional PDF heatmap is created:</p> <p>\u00a0\u00a0\u2022 <code>C:\\Project\\RNSA_Results\\Merged_Project_Results - RNSA - Subpopulation Heatmap.pdf</code></p> <p>Figure: Example of a heatmap with hierarchical clustering applied to Early, Late, and Other subpopulations in RNSA data</p> <p>By following these steps, the script automatically classifies cells into predefined subpopulations based on intensity thresholds applied within specific time windows and generates a heatmap for visual representation. </p> <p>This automated approach enables efficient analysis and visualization of RNSA data, facilitating the identification of meaningful trends in cellular behavior.</p>"},{"location":"ScreenByRepTime/","title":"ScreenByRepTime Script Documentation","text":"<p>The ScreenByRepTime script screens cells from the replication summary file generated by AutoCRAT. It filters cells based on their replication time, allowing for the identification of cells that replicate early or late in the experiment. It is particularly useful for experiments where damage or treatment before replication is being studied, as it ensures only relevant cells are analyzed.</p>"},{"location":"ScreenByRepTime/#key-tasks","title":"Key Tasks","text":""},{"location":"ScreenByRepTime/#-read-input-files","title":"- Read Input Files","text":"<ul> <li>Reads the 'Rep Summary' file and, if available, includes the 'RNSA' file from an AutoCRAT run.</li> </ul>"},{"location":"ScreenByRepTime/#-screen-cells-by-replication-time","title":"- Screen Cells by Replication Time","text":"<ul> <li>Filters cells based on a specified replication time threshold (<code>rep_time_threshold</code>):</li> <li>Under Mode: Retains cell where replication occurs before the threshold and discards those replicating at or after the threshold.</li> <li>Over Mode: Retains cell where replication occurs after the threshold and discards those replicating at or before the threshold.</li> </ul>"},{"location":"ScreenByRepTime/#-generate-updated-files","title":"- Generate Updated Files","text":"<ul> <li>Creates a new 'Rep Summary' file and optionally generates an 'RNSA' file if it was provided. Cells beyond the threshold are excluded.</li> </ul>"},{"location":"ScreenByRepTime/#how-to-use-screenbyreptime","title":"How to Use ScreenByRepTime","text":""},{"location":"ScreenByRepTime/#step-1-edit-parameters-in-the-script","title":"Step 1: Edit Parameters in the Script","text":""},{"location":"ScreenByRepTime/#specify-the-rep-summary-file-location","title":"\u2022 Specify the Rep Summary File Location","text":"<p>Define the folder and filename of the Rep Summary file. The RNSA file can optionally be included in the same folder. If both are provided, the output will reflect both files:</p> <pre><code>folder = r'path_to_your_folder'\nrep_summary_filename = 'your_rep_summary_file.xlsx'\n</code></pre>"},{"location":"ScreenByRepTime/#set-the-screening-threshold","title":"\u2022 Set the Screening Threshold","text":"<p>Define the replication time threshold and the filtering mode: - Threshold Timepoint: Timepoint beyond which cells are filtered (<code>rep_time_threshold</code>). - Mode: <code>'Under'</code> or <code>'Over'</code> to specify which cells to retain. Choose <code>'Under'</code> to keep cells replicating earlier than the threshold or <code>'Over'</code> to keep cells replicating later than the threshold.</p> <pre><code>rep_time_threshold = 100\nunder_over = 'Under'\n</code></pre>"},{"location":"ScreenByRepTime/#configure-summary-chart-parameters","title":"\u2022 Configure Summary Chart Parameters","text":"<p>Set the appearance of the RNSA summary chart:</p> <pre><code>colors = ['red', 'orange', 'lime']  # Chart colors\nrnsa_x_axis = [-2, 3]               # X-axis range\nrnsa_y_axis = [0.1, 0.8]            # Y-axis range\n</code></pre>"},{"location":"ScreenByRepTime/#step-2-run-the-script","title":"Step 2: Run the Script","text":"<p>After editing the parameters: \u2022 Save the script. \u2022 Run the script in your Python environment (e.g., command line, Jupyter Notebook, or PyCharm).</p>"},{"location":"ScreenByRepTime/#step-3-output-files","title":"Step 3: Output Files","text":"<p>The script generates the following output files in the same folder as the original Rep Summary file:  \u00a0\u00a0\u2022 <code>your_rep_summary_file - Screened (Rep time under/over X).xlsx</code>    - Summarizes cells that meet the replication time criteria.  \u00a0\u00a0\u2022 <code>your_rep_summary_file - RNSA - Screened (Rep time under/over X).xlsx</code>    - Contains RNSA data for cells that passed the replication time screening.</p>"},{"location":"ScreenByRepTime/#example-configuration","title":"Example Configuration","text":"<p>Below is a sample configuration to screen out cells with replication times greater than 100 minutes, keeping only cells that replicate earlier:</p> <pre><code>\"\"\" Parameters \"\"\"\n\n# Location and filename of the \"Rep Summary\" file to be screened.\n# If there is an AutoCRAT \"RNSA\" file in the same folder and with an identical name\n# (except with \"RNSA\" instead of \"Rep Summary\"), it will also undergo screening.\nfolder = r'C:\\Project\\Merged_Results'\nrep_summary_filename = 'Merged_Project_Results - Rep Summary.xlsx'\n\n# Threshold timepoint beyond which cells will be screened.\nrep_time_threshold = 100\n\n# Select which cells to *keep*.\n# If 'Under', cells in which all arrays are replicated before the above threshold\n# will be kept, cells in which at least one array is replicated at or after the\n# threshold will be discarded.\n# If 'Over', cells in which all arrays are replicated after the threshold will be\n# kept.\nunder_over = 'under'\n\n# Parameters for RNSA summary chart.\ncolors = ['red', 'orange', 'lime']\nrnsa_x_axis = [-2, 3]\nrnsa_y_axis = [0.1, 0.8]\n</code></pre>"},{"location":"ScreenByRepTime/#example-output","title":"Example Output","text":"<ul> <li><code>C:\\Project\\Merged_Results\\Merged_Project_Results - Rep Summary - Screened (Rep time under 100).xlsx</code></li> <li><code>C:\\Project\\Merged_Results\\Merged_Project_Results - RNSA - Screened (Rep time under 100).xlsx</code></li> </ul> <p>By following these steps, you can efficiently filter cells based on replication time, ensuring that only early or late replicating cells are retained for further analysis.</p>"},{"location":"ScreenRNSA/","title":"ScreenRNSA Script Documentation","text":"<p>The ScreenRNSA script screens cells that appear in the RNSA analysis using a rolling window intensity approach. It identifies cells with sufficiently bright signals by analyzing intensity time-series data and applying threshold-based filtering.</p>"},{"location":"ScreenRNSA/#key-tasks","title":"Key Tasks","text":""},{"location":"ScreenRNSA/#-read-input-files","title":"- Read Input Files","text":"<ul> <li>The script reads and processes the 'RNSA', 'Rep Summary', and 'Results' files from an AutoCRAT run.</li> </ul>"},{"location":"ScreenRNSA/#-apply-rolling-window-analysis","title":"- Apply Rolling Window Analysis","text":"<ul> <li>Analyzes intensity time series for each cell by dividing the data into rolling windows of a predefined length (<code>window_length</code>).</li> <li>Calculates the average intensity for each window.</li> </ul>"},{"location":"ScreenRNSA/#-filter-out-invalid-windows","title":"- Filter Out Invalid Windows","text":"<ul> <li>Discards windows where more than 30% of the data points are missing (<code>NaN</code>), as they are unreliable.</li> <li>Excludes cells with fewer than 25% valid windows, as there isn\u2019t enough data for confident analysis.</li> </ul>"},{"location":"ScreenRNSA/#-categorize-cells-as-positive-or-negative","title":"- Categorize Cells as Positive or Negative","text":"<ul> <li>Checks if any valid rolling windows have an average intensity above the specified threshold (<code>min_intensity</code>).</li> <li>Marks cells as positive if they meet the threshold; otherwise, marks them as negative.</li> </ul>"},{"location":"ScreenRNSA/#-generate-updated-files","title":"- Generate Updated Files","text":"<ul> <li>Creates new 'Rep Summary' and 'RNSA' files.</li> <li>The RNSA file includes cells that passed the intensity threshold.</li> </ul>"},{"location":"ScreenRNSA/#how-to-use-screenrnsa","title":"How to Use ScreenRNSA","text":""},{"location":"ScreenRNSA/#step-1-edit-parameters-in-the-script","title":"Step 1: Edit Parameters in the Script","text":""},{"location":"ScreenRNSA/#specify-the-rnsa-file-location","title":"\u2022 Specify the RNSA File Location","text":"<p>Set the folder and filename of the RNSA file. Ensure the corresponding Rep Summary file is located in the same folder:</p> <pre><code>rnsa_folder = r'path_to_your_folder'\nrnsa_filename = 'your_rnsa_file.xlsx'\n</code></pre>"},{"location":"ScreenRNSA/#define-the-autocrat-results-folders","title":"\u2022 Define the AutoCRAT Results Folders","text":"<p>List all folders containing AutoCRAT \"Results\" files:</p> <pre><code>folders = [\n    r'path_to_results_folder1',\n    r'path_to_results_folder2',\n]\n</code></pre>"},{"location":"ScreenRNSA/#set-analysis-parameters","title":"\u2022 Set Analysis Parameters","text":"<p>Update the parameters for cell screening: - <code>Channel of Interest</code>: Specify the intensity channel to analyze. - <code>Window Length</code>: Set the length (in timepoints) of the rolling window for intensity averaging. - <code>Minimum Intensity Threshold</code>: Define the threshold for the average intensity during the window.</p> <pre><code>channel_of_interest = 'EGFP'\nwindow_length = N\nmin_intensity = T\n</code></pre>"},{"location":"ScreenRNSA/#configure-summary-chart-parameters","title":"\u2022 Configure Summary Chart Parameters","text":"<p>Set the appearance of the RNSA summary chart:</p> <pre><code>colors = ['red', 'orange', 'lime']  # Chart colors\nrnsa_x_axis = [-2, 3]  # X-axis range\nrnsa_y_axis = [0.1, 0.8]  # Y-axis range\n</code></pre>"},{"location":"ScreenRNSA/#step-2-run-the-script","title":"Step 2: Run the Script","text":"<p>After editing the parameters:  \u00a0\u00a0\u2022 Save the script.  \u00a0\u00a0\u2022 Run the script in your Python environment (e.g., command line, Jupyter Notebook, or PyCharm).</p>"},{"location":"ScreenRNSA/#step-3-output-files","title":"Step 3: Output Files","text":"<p>The script generates two output files, saved in the same folder as the original RNSA file:</p> <p>\u00a0\u00a0\u2022    <code>your_rnsa_file - Rep Summary - Screened (Window N, Int T).xlsx</code> : Summarizes positive and negative cells based on the analysis.  </p> <p>\u00a0\u00a0\u2022    <code>your_rnsa_file - RNSA - Screened (Window N, Int T).xlsx</code>: Contains RNSA data for cells that passed the intensity threshold.  </p>"},{"location":"ScreenRNSA/#example-configuration","title":"Example Configuration","text":"<p>Below is a sample configuration for running the script:</p> <pre><code>\"\"\" Parameters \"\"\"\n\n# Location and filename of the RNSA file to be screened.\n# There must be an AutoCRAT \"Rep Summary\" file in the same folder,\n# and with an identical name (except with \"Rep Summary\" instead of \"RNSA\").\nrnsa_folder = r'C:\\Project\\Merged_Results'\nrnsa_filename = 'Merged_Project_Results - RNSA.xlsx'\n\n# Folders in which all the relevant AutoCRAT \"Results\" files are located.\nfolders = [\n    r'C:\\Project\\Run1',\n    r'C:\\Project\\Run2',\n    r'C:\\Project\\Run3'\n]\n\n# Name of channel in which intensity should be examined.\nchannel_of_interest = 'EGFP'\n\n# Length of time windows (in timepoints) during which the intensity will be averaged.\nwindow_length = 12\n# Minimum intensity (average during time window) which qualifies a cell for selection.\nmin_intensity = 65\n\n# Parameters for RNSA summary chart.\ncolors = ['red', 'orange', 'lime']\nrnsa_x_axis = [-2, 3]\nrnsa_y_axis = [0.1, 0.8]\n</code></pre>"},{"location":"ScreenRNSA/#expected-output","title":"Expected Output","text":"<ul> <li><code>C:\\Project\\Merged_Results\\Merged_Project_Results - Rep Summary - Screened (Window 12, Int 65).xlsx</code></li> <li><code>C:\\Project\\Merged_Results\\Merged_Project_Results - RNSA - Screened (Window 12, Int 65).xlsx</code></li> </ul> <p>By following these steps, you can efficiently identify and categorize cells based on intensity thresholds, ensuring accurate and reliable RNSA analysis.</p>"},{"location":"ScreenRNSA_Cutoff/","title":"ScreenRNSA_Cutoff Script Documentation","text":"<p>The ScreenRNSA_Cutoff script is an enhanced version of ScreenRNSA, designed to screen cells appearing in the RNSA analysis using a rolling window intensity approach. It introduces a dynamic cutoff time, ensuring each cell is analyzed only up to a calculated time point derived from the Rep Summary file.</p>"},{"location":"ScreenRNSA_Cutoff/#key-tasks","title":"Key Tasks","text":""},{"location":"ScreenRNSA_Cutoff/#-read-input-files","title":"- Read Input Files","text":"<ul> <li>The script reads and processes the 'RNSA', 'Rep Summary', and 'Results' files from an AutoCRAT run.</li> <li>Filters the 'Rep Summary' file to include only the cells present in the RNSA analysis.</li> </ul>"},{"location":"ScreenRNSA_Cutoff/#-apply-dynamic-cutoff-time","title":"- Apply Dynamic Cutoff Time","text":"<ul> <li>Determines a cutoff time for each cell based on time points from the 'Rep Summary' file.</li> <li>Trims the intensity time series to exclude data points beyond the calculated cutoff time before further analysis.</li> </ul>"},{"location":"ScreenRNSA_Cutoff/#-apply-rolling-window-analysis","title":"- Apply Rolling Window Analysis","text":"<ul> <li>Analyzes the trimmed intensity time series for each cell by dividing the data into rolling windows of a predefined length (window_length).</li> <li>Calculates the average intensity for each window.</li> </ul>"},{"location":"ScreenRNSA_Cutoff/#-filter-out-invalid-windows","title":"- Filter Out Invalid Windows","text":"<ul> <li>Discards windows where more than 30% of the data points are missing (<code>NaN</code>), as they are unreliable.</li> <li>Excludes cells with fewer than 25% valid windows, as there isn\u2019t enough data for confident analysis.</li> </ul>"},{"location":"ScreenRNSA_Cutoff/#-categorize-cells-as-positive-or-negative","title":"- Categorize Cells as Positive or Negative","text":"<ul> <li>Checks if any valid rolling windows have an average intensity above the specified threshold (<code>min_intensity</code>).</li> <li>Marks cells as positive if they meet the threshold; otherwise, marks them as negative.</li> </ul>"},{"location":"ScreenRNSA_Cutoff/#-generate-updated-files","title":"- Generate Updated Files","text":"<ul> <li>Creates new 'Rep Summary' and 'RNSA' files.</li> <li>The output filenames now include the cutoff time value in addition to the rolling window and intensity threshold parameters.</li> <li>The RNSA file includes cells that passed the intensity threshold.</li> </ul>"},{"location":"ScreenRNSA_Cutoff/#how-to-use-screenrnsa","title":"How to Use ScreenRNSA","text":""},{"location":"ScreenRNSA_Cutoff/#step-1-edit-parameters-in-the-script","title":"Step 1: Edit Parameters in the Script","text":""},{"location":"ScreenRNSA_Cutoff/#specify-the-rnsa-file-location","title":"\u2022 Specify the RNSA File Location","text":"<p>Set the folder and filename of the RNSA file. Ensure the corresponding Rep Summary file is located in the same folder:</p> <pre><code>rnsa_folder = r'path_to_your_folder'\nrnsa_filename = 'your_rnsa_file.xlsx'\n</code></pre>"},{"location":"ScreenRNSA_Cutoff/#define-the-autocrat-results-folders","title":"\u2022 Define the AutoCRAT Results Folders","text":"<p>List all folders containing AutoCRAT \"Results\" files:</p> <pre><code>folders = [\n    r'path_to_results_folder1',\n    r'path_to_results_folder2',\n]\n</code></pre>"},{"location":"ScreenRNSA_Cutoff/#set-analysis-parameters","title":"\u2022 Set Analysis Parameters","text":"<p>Update the parameters for cell screening: - <code>Channel of Interest</code>: Specify the intensity channel to analyze. - <code>Window Length</code>: Set the length (in timepoints) of the rolling window for intensity averaging. - <code>Minimum Intensity Threshold</code>: Define the threshold for the average intensity during the window. - <code>Cutoff time</code>:  Defines a normalized time limit for each cell. The script calculates this cutoff dynamically based on the Rep Summary time points and excludes any data beyond this point. </p> <pre><code>channel_of_interest = 'EGFP'\nwindow_length = N\nmin_intensity = T\ncutoff_time = X\n</code></pre> <p>Example: How is the cutoff time calculated?* For Cell 16** (from the provided data):  </p> Field Cell Si-Rhodamine tdTomato \u0394T (tdTomato - Si-Rhodamine) 20250216_ 16 32.594 59.138 26.544 <p>For each cell, the script extracts two time points from the Rep Summary file: - <code>T0</code>: The first time point (e.g., 32.594 for Si-Rhodamine in the example). - <code>T1</code>: The second time point (e.g., 59.138 for tdTomato in the example).  </p> <p>Using these values, the cutoff time is calculated dynamically using the formula:</p> <p>$$ \\text{actual_cutoff} = T1 + (T1 - T0) \\times (\\text{cutoff_time} - 1) $$</p> <p>Assuming cutoff_time = 1.1, the actual cutoff is calculated as follows:</p> <p>$$ \\text{actual_cutoff} = 59.138 + (26.544 \\times (1.1 - 1))=61.792 $$</p> <p>Thus, the script trims cell 16 data to exclude any time points beyond 61 to apply rolling window analysis.</p>"},{"location":"ScreenRNSA_Cutoff/#configure-summary-chart-parameters","title":"\u2022 Configure Summary Chart Parameters","text":"<p>Set the appearance of the RNSA summary chart:</p> <pre><code>colors = ['red', 'orange', 'lime']  # Chart colors\nrnsa_x_axis = [-2, 3]  # X-axis range\nrnsa_y_axis = [0.1, 0.8]  # Y-axis range\n</code></pre>"},{"location":"ScreenRNSA_Cutoff/#step-2-run-the-script","title":"Step 2: Run the Script","text":"<p>After editing the parameters:  \u00a0\u00a0\u2022 Save the script.  \u00a0\u00a0\u2022 Run the script in your Python environment (e.g., command line, Jupyter Notebook, or PyCharm).</p>"},{"location":"ScreenRNSA_Cutoff/#step-3-output-files","title":"Step 3: Output Files","text":"<p>The script generates two output files, saved in the same folder as the original RNSA file:</p> <p>\u00a0\u00a0\u2022    <code>your_rnsa_file - Rep Summary - Screened (Window N, Int T, Cutoff X).xlsx</code> : Summarizes positive and negative cells based on the analysis.  </p> <p>\u00a0\u00a0\u2022    <code>your_rnsa_file - RNSA - Screened (Window N, Int T, , Cutoff X).xlsx</code>: Contains RNSA data for cells that passed the intensity threshold.  </p>"},{"location":"ScreenRNSA_Cutoff/#example-configuration","title":"Example Configuration","text":"<p>Below is a sample configuration for running the script:</p> <pre><code>\"\"\" Parameters \"\"\"\n\n# Location and filename of the RNSA file to be screened.\n# There must be an AutoCRAT \"Rep Summary\" file in the same folder,\n# and with an identical name (except with \"Rep Summary\" instead of \"RNSA\").\nrnsa_folder = r'C:\\Project\\Merged_Results'\nrnsa_filename = 'Merged_Project_Results - RNSA.xlsx'\n\n# Folders in which all the relevant AutoCRAT \"Results\" files are located.\nfolders = [\n    r'C:\\Project\\Run1',\n    r'C:\\Project\\Run2',\n    r'C:\\Project\\Run3'\n]\n\n# Name of channel in which intensity should be examined.\nchannel_of_interest = 'EGFP'\n\n# Length of time windows (in timepoints) during which the intensity will be averaged.\nwindow_length = 12\n# Minimum intensity (average during time window) which qualifies a cell for selection.\nmin_intensity = 65\n# New parameter: Cutoff time in normalized units.\ncutoff_time = 1.1  \n\n# Parameters for RNSA summary chart.\ncolors = ['red', 'orange', 'lime']\nrnsa_x_axis = [-2, 3]\nrnsa_y_axis = [0.1, 0.8]\n</code></pre>"},{"location":"ScreenRNSA_Cutoff/#expected-output","title":"Expected Output","text":"<ul> <li><code>C:\\Project\\Merged_Results\\Merged_Project_Results - Rep Summary - Screened (Window 12, Int 65, Cutoff 1.1).xlsx</code></li> <li><code>C:\\Project\\Merged_Results\\Merged_Project_Results - RNSA - Screened (Window 12, Int 65, Cutoff 1.1).xlsx</code></li> </ul> <p>By following these steps, you can efficiently identify and categorize cells based on intensity thresholds while dynamically adjusting the analysis window using a cutoff time, ensuring accurate and reliable RNSA analysis.</p>"},{"location":"SwarmPlot/","title":"SwarmPlot Script Documentation","text":"<p>The SwarmPlot script generates a combination of swarm and box plots from tabular data copied to the clipboard. The script is designed to visualize sample distributions, detect outliers, and summarize statistical properties of the dataset.  </p>"},{"location":"SwarmPlot/#key-tasks","title":"Key Tasks","text":""},{"location":"SwarmPlot/#-read-and-process-data","title":"- Read and Process Data","text":"<ul> <li>Reads tabular data copied to the clipboard.  </li> <li>Assumes each column represents a sample, and the first row contains sample names.  </li> </ul>"},{"location":"SwarmPlot/#-configure-plot-appearance","title":"- Configure Plot Appearance","text":"<ul> <li>Defines customized plot styles, including:  </li> <li>Axis line widths  </li> <li>Tick sizes and font settings  </li> <li>Padding adjustments for better spacing  </li> </ul>"},{"location":"SwarmPlot/#-generate-swarm-and-box-plots","title":"- Generate Swarm and Box Plots","text":"<ul> <li>Swarm Plot: Displays individual data points with slight jittering to prevent overlap.  </li> <li>Box Plot: Adds a statistical summary, including:  <ul> <li>Median line for central tendency.  </li> <li>Interquartile range (IQR) box for variability.   </li> <li>No outliers drawn separately to avoid redundancy with the swarm plot.  </li> </ul> </li> </ul>"},{"location":"SwarmPlot/#-adjust-labels-and-axis-properties","title":"- Adjust Labels and Axis Properties","text":"<ul> <li>Sets the y-axis label to <code>\"Replication time\"</code> with a large font.  </li> <li>Removes top and right spines for a minimalist look.  </li> <li>Allows optional y-axis limit adjustment (commented out).  </li> </ul>"},{"location":"SwarmPlot/#-save-the-figure","title":"- Save the Figure","text":"<ul> <li>Saves the plot as a PNG file.  </li> <li>Automatically saves to the user's Desktop as <code>\"Swarm Plot.png\"</code>.  </li> </ul>"},{"location":"SwarmPlot/#how-to-use-the-script","title":"How to Use the Script","text":""},{"location":"SwarmPlot/#step-1-copy-data-to-clipboard","title":"Step 1: Copy Data to Clipboard","text":"<ul> <li>Ensure data is structured as columns of numerical values, with the first row as sample names.  </li> <li>Copy the dataset from Excel, Google Sheets, or any text file.  </li> </ul>"},{"location":"SwarmPlot/#step-2-run-the-script","title":"Step 2: Run the Script","text":"<ul> <li>Execute the script in your Python environment.  </li> </ul>"},{"location":"SwarmPlot/#step-3-output-plot","title":"Step 3: Output Plot","text":"<ul> <li>The script displays the combined swarm-box plot.  </li> <li>The figure is automatically saved to the Desktop as <code>\"Swarm Plot.png\"</code> </li> </ul>"},{"location":"SwarmPlot/#example-usage","title":"Example Usage","text":""},{"location":"SwarmPlot/#sample-input-data","title":"Sample Input Data","text":"<pre>\nCy5    tdTom\n22.424    43.074\n31.705    51.34\n16.864    37.234\n38.422    54.214\n35.913    43.981\n22.477    45.285\n34.248    41.747\n22.752    43.542\n35.422    52.266\n28.936    40.951\n23.495    57.499\n30.934    58.835\n25.6    48.876\n27.739    57.295\n21.873    43.249\n34.812    44.483\n25.729    51.646\n26.921    66.686\n23.276    29.741\n24.753    32.174\n16.253    28.497\n23.724    36.826\n26.043    45.406\n19.31    41.457\n50.942    73.216\n19.72    43.956\n39.316    66.106\n26.195    68.882\n20.717    46.607\n43.935    53.436\n21.532    46.271\n53.375    66.179\n24.649    39.159\n24.521    57.035\n23.195    51.588\n29.259    44.077\n21.565    50.209\n24.632    43.859\n31.179    59.249\n34.567    39.825\n18.389    26.087\n30.958    44.6\n68.116    87.943\n44.72    81.115\n60.092    86.054\n19.307    47.416\n27.369    74.542\n22.045    43.637\n18.199    43.513\n23.163    41.49\n26.152    70.354\n36.419    54.384\n23.559    57.931\n34.838    47.811\n33.819    53.711\n60.238    71.627\n33.569    49.298\n68.964    94.517\n19.886    45.973\n38.446    73.402\n20.838    43.977\n20.091    45.961\n25.587    47.235\n23.475    30.115\n35.031    52.496\n22.477    51.4\n19.003    32.138\n22.002    39.524\n18.947    30.481\n28.73    37.349\n77.638    89.723\n12.885    36.745\n35.886    41.509\n18.469    66.554\n16.371    42.349\n12.926    35.844\n12.322    48.048\n20.557    54.819\n20.382    43.539\n19.687    35.85\n20.291    72.417\n16.32    61.128\n32.843    58.693\n19.387    36.642\n12.972    41.407\n24.284    55.872\n27.32    38.833\n22.647    42.02\n24.543    48.643\n24.91    53.147\n18.44    35.669\n22.972    42.151\n19.749    55.872\n19.99    44.533\n28.729    54.555\n29.328    46.208\n19.953    61.493\n48.996    83.032\n24.175    41.118\n25.844    55.397\n47.223    84.512\n28.67    73.195\n19.42    30.943\n40.064    50.868\n12.252    30.865\n23.55    39.831\n19.017    53.319\n25.065    39.634\n29.949    48.965\n38.25    60.314\n28.012    77.632\n16.516    33.624\n21.646    73.516\n43.627    49.87\n20.646    35.068\n30.881    57.643\n28.003    56.171\n</pre>"},{"location":"SwarmPlot/#expected-output","title":"Expected OutputSwarm-Box Plot","text":"<ul> <li><code>C:\\Desktop\\Swarm Plot.png</code></li> </ul> <p>Figure: Example of a swarm-box plot showing Cy5 and tdTom signal distributions</p> <p>By following these steps, you can efficiently visualize sample distributions and statistical summaries using swarm and box plots. This script provides an effective way to analyze variability, outliers, and compare distributions between samples.</p>"},{"location":"configuration/","title":"Configuration","text":"<ul> <li>Configuration Overview</li> <li>YAML File Reference<pre><code>- Config Overview: configuration.md\n- YAML File Reference: configuration.md#yaml-parameters\n</code></pre> </li> </ul>"},{"location":"configuration/#configuration-overview","title":"Configuration Overview","text":"<p>AutoCRAT reads parameters from a YAML configuration file (config/AutoCRAT config - Template.yml).</p>"},{"location":"configuration/#yaml-file-reference","title":"YAML File Reference","text":""},{"location":"contact/","title":"Contact &amp; Lab Information","text":"<p>The AutoCRAT pipeline was developed at the  Amir Aharoni Lab Department of Life Sciences    Ben-Gurion University of the Negev, Beer-Sheva, Israel</p>"},{"location":"contact/#about-the-lab","title":"\ud83d\udd2c About the Lab","text":"<p>The Amir Aharoni Lab focuses on molecular and cellular biology, with a strong emphasis on synthetic biology, protein evolution, and genome dynamics. The development of the AutoCRAT pipeline reflects the lab\u2019s commitment to advancing automated analysis tools in live-cell imaging.</p> <p>Learn more at the \u27a1\ufe0f Amir Aharoni Lab Website </p>"},{"location":"contact/#contact","title":"\ud83d\udcec Contact","text":"<p>We welcome contributions, suggestions, and collaborations.  \ud83d\udce7 Email: Prof. Amir Aharoni</p> <p>This site and its contents are under active development and subject to change.</p>"},{"location":"installation/","title":"Installation","text":"<ul> <li>Installation Guide</li> <li>System Requirements</li> <li>Install AutoCRAT<pre><code>- Installation Guide:\n- System Requirements: installation.md#system-requirements\n</code></pre> </li> </ul>"},{"location":"installation/#installation-guide","title":"Installation Guide","text":""},{"location":"installation/#system-requirements","title":"System Requirements","text":"<p>Operating System: Windows, MacOS, or Linux Python Version: &gt;= 3.8 RAM: \u2265 8GB (recommended for large data)</p>"},{"location":"installation/#install-autocrat","title":"Install AutoCRAT","text":"<p>Using GitHub</p> <pre><code>git clone https://github.com/Amir-Aharoni-Lab/AutoCRAT-Pipeline.git\ncd AutoCRAT-Pipeline\n</code></pre>"},{"location":"installation/#install-dependencies","title":"Install Dependencies","text":"<pre><code>pip install numpy pandas trackpy pims scipy yaml matplotlib openpyxl xlsxwriter\n</code></pre>"},{"location":"output_files/","title":"Output Files","text":"<ul> <li>Excel Outputs</li> <li>Log File<pre><code>- Excel Outputs: output_files.md#excel-results\n- Log File: output_files.md#log-file\n</code></pre> </li> </ul> <p>AutoCRAT generates:</p> <ul> <li>Results (AutoCRAT YYYYMMDD HHMM).xlsx \u2013 Tracked data per cell for each position.</li> <li>Rep Summary (AutoCRAT YYYYMMDD HHMM).xlsx \u2013 Summary of replication times.</li> <li>RNSA (AutoCRAT YYYYMMDD HHMM).xlsx \u2013 RNSA analysis.</li> <li>Log file \u2013 Execution details &amp; debug information.</li> </ul>"},{"location":"output_files/#excel-outputs","title":"Excel Outputs","text":""},{"location":"output_files/#log-file","title":"Log File","text":""},{"location":"pipeline/","title":"Pipeline Workflow","text":"<ul> <li>Overview</li> <li>Step 1: Importing Movies</li> <li>Step 2: Fluorescent Dot Detection, Tracking &amp; Cell Identification</li> <li>Step 3: Replication Analysis</li> <li>Step 4: Replisome-Normalized Signal Averaging (RNSA)</li> <li>Step 5: Double-Strand Break Detection</li> <li>Step 6: Results Export<pre><code>- Overview: pipeline.md\n- Step 1: Importing Movies: pipeline.md#import-movies\n- Step 2: Fluorescent Dot Tracking: pipeline.md#dot-tracking\n- Step 3: Replication Analysis: pipeline.md#replication-analysis\n- Step 4: Double-Strand Break Detection: pipeline.md#dsb-analysis\n</code></pre> </li> </ul>"},{"location":"pipeline/#overview","title":"Overview","text":"<p>AutoCRAT is a Python-based pipeline for analyzing time-lapse microscopy images of chromosomal replication. It automatically identifies, tracks, and analyzes fluorescently labeled loci over time to quantify replication dynamics.</p> <p>The AutoCRAT pipeline performs:</p> <ul> <li>Fluorescent dot identification &amp; tracking (using TrackPy)</li> <li>Replication time analysis (sigmoid fitting of fluorescence intensity)</li> <li>Double-strand break detection (based on co-localization loss)</li> <li>Replisome-normalized signal averaging (RNSA) (quantifying signal dynamics relative to replication timing)</li> </ul> <p>It integrates multiple submodules:</p> <ul> <li>AutoCRAT_IDCL.py \u2013 Identifies dots by co-localization</li> <li>AutoCRAT_Slicer.py \u2013 Extracts relevant data regions</li> <li>AutoCRAT_RNSA.py \u2013 Performs RNSA analysis</li> <li>AutoCRAT_DSB.py \u2013 Detects double-strand breaks</li> <li>AutoCRAT_RepTime.py \u2013 Fits sigmoidal curves to replication time data</li> <li>AutoCRAT_cfg.py \u2013 Handles configuration parameters</li> </ul>"},{"location":"pipeline/#step-1-importing-movies","title":"Step 1: Importing Movies","text":"<ul> <li>Loads microscopy movies using PIMS.</li> <li>Supports BioFormats and TIFF sequence modes.</li> <li>Reads metadata (e.g., pixel size, timepoints, channels).</li> </ul>"},{"location":"pipeline/#step-2-fluorescent-dot-detection-tracking-cell-identification","title":"Step 2: Fluorescent Dot Detection, Tracking &amp; Cell Identification","text":"<ul> <li>Uses TrackPy for tracking.</li> <li>Dynamically thresholds fluorescence intensities.</li> <li>Removes spurious signals &amp; clusters.</li> <li>Tracks dots across timepoints.</li> <li>Groups co-localized tracks into cells.</li> <li>Ensures required channels are present.</li> </ul>"},{"location":"pipeline/#step-3-replication-analysis","title":"Step 3: Replication Analysis","text":"<ul> <li>Fits sigmoidal curves to intensity time series.</li> <li>Identifies replication time midpoints.</li> <li>Generates summary statistics.</li> </ul>"},{"location":"pipeline/#step-4-replisome-normalized-signal-averaging-rnsa","title":"Step 4: Replisome-Normalized Signal Averaging (RNSA)","text":"<ul> <li>Normalizes signals based on replication timing.</li> <li>Aligns intensities in replisome time units.</li> </ul>"},{"location":"pipeline/#step-5-double-strand-break-detection","title":"Step 5: Double-Strand Break Detection","text":"<ul> <li>Detects loss of co-localization between loci.</li> <li>Requires pre-defined dsb_channels in YAML.</li> </ul>"},{"location":"pipeline/#step-6-results-export","title":"Step 6: Results Export","text":"<ul> <li>Saves Excel files with tracked data.</li> <li>Generates summary reports &amp; visualizations.</li> </ul>"},{"location":"quick_start/","title":"Quick Start","text":""},{"location":"quick_start/#running-via-batch-script","title":"Running via Batch Script","text":"<p>The AutoCRAT.bat script is provided for convenience:</p> <pre><code>:: Execute AutoCRAT with configured parameters\n%PYTHON_EXEC% %SCRIPT_PATH% %MOVIE_PATH% %MOVIE_FILE% %CONFIG_PATH% -p %POS_RANGE%\n</code></pre> <p>Modify the AutoCRAT config - Template.yml file to specify analysis parameters.</p>"},{"location":"quick_start/#running-via-command-line","title":"Running via Command Line","text":"<p>Alternatively, you can execute AutoCRAT.py manually:</p> <pre><code>python AutoCRAT.py \"path_to_movie\" \"filename\" \"config.yml\" --positions 1 2\n</code></pre>"},{"location":"quick_start/#running-in-a-python-script","title":"Running in a Python Script","text":"<pre><code>main(path, filename, config, positions, prev_summary, prev_RNSA)\n</code></pre> <p>path: Path to the microscopy data. filename: The name of your microscopy movie file(s). config: YAML configuration file. positions: Positions to analyze (optional). prev_summary: Previous summary file (not in use). prev_rnsa: Previous RNSA file (not in use).</p>"},{"location":"step2_detection_and_tracking/","title":"Dot Detection & Tracking","text":"<p>Performs dot identification and tracking using TrackPy. Groups co-localized tracks into cells.</p>"},{"location":"step3_replication_analysis/","title":"Replication Analysis","text":"<p>Fits sigmoidal curves to fluorescence intensities to estimate replication times.</p>"},{"location":"step4_rnsa/","title":"Replisome-Normalized Signal Averaging","text":"<p>Performs Replisome-Normalized Signal Averaging (RNSA).</p>"},{"location":"step5_dsb/","title":"Double-Strand Break Detection","text":"<p>Detects double-strand breaks (DSBs) based on co-localization loss.</p>"}]}